from fastapi import APIRouter, Response, HTTPException, Depends, Request

from src.api.dependencies import DBDep
from src.exceptions import NicknameIsEmptyException, EmailIsAlreadyRegisteredException, RegisterErrorException, \
    LoginErrorException
from src.schemas.users import UserRequestAddRegister, UserLogin
from src.services.auth import AuthService
from src.utils.auth_utils import UserIdDep

router = APIRouter(prefix="/auth", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"])


@router.post(
    "/register",
    summary='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    description='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
)
async def register_user(data: UserRequestAddRegister, db: DBDep):
    try:
        user = await AuthService(db).register_user(data)
    except NicknameIsEmptyException:
        raise HTTPException(status_code=400, detail="–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    except EmailIsAlreadyRegisteredException:
        raise HTTPException(status_code=409, detail="Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    except RegisterErrorException:
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    return user

@router.post(
    "/login",
    summary='–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
    description='–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
)
async def login_user(data: UserLogin, response: Response, db: DBDep):
    try:
        access_token = await AuthService(db).login_and_get_access_token(data=data)
    except LoginErrorException:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    response.set_cookie("access_token", access_token)
    return {"access_token": access_token}


@router.get(
    "/me",
    summary='üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
    description='–ü–æ–ª—É—á–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
)
async def get_me(user_id: UserIdDep, db: DBDep):
    user = await AuthService(db).get_one_or_none_user(user_id)
    return user

@router.get(
    '/me/favourites',
    summary='–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏'
)
async def get_favourite_books(user_id: UserIdDep, db: DBDep):
    return AuthService(db).get_favourite_books(user_id)

###############################
async def get_current_user(request: Request):
    access_token = request.cookies.get("access_token")
    if not access_token:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return AuthService().decode_token(access_token)
###############################

@router.post(
    "/logout",
    summary='–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
)
async def logout(response: Response, current_user=Depends(get_current_user)):
    response.delete_cookie("access_token")
    return {"status": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}